AWSTemplateFormatVersion: 2010-09-09


# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
  CertificateArn:
    Type: String

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        # Make table name accessible as environment variable from function code during execution
        POST_TABLE: !Ref PostTable
        ASSET_TABLE: !Ref AssetTable
        UPLOAD_BUCKET: !Ref PublicAssetBucket
        ASSETS_URL: !GetAtt AssetsCloudFrontDistribution.DomainName

  Api:
    BinaryMediaTypes:
      - "image~1jpeg"
      - "image~1png"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: AdminAuthorizer

Resources:

  # API setup with authorizer
  BlogApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          AdminAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      StageName: Prod

  # This is a Lambda function config associated with the source code: get-all-posts.js
  GetAllPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.getAllPosts
      Description: Get all the posts from dynamodb table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/all
            Method: GET

  # This is a Lambda function config associated with the source code: get-published-posts.js
  GetPublishedPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.getPublishedPosts
      Description: Get a all the posts with status 'published'
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/published
            Method: GET
            Auth:
              Authorizer: NONE

  # This is a Lambda function config associated with the source code: get-post-by-slug.js
  GetPostBySlugFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.getPostBySlug
      Description: Get a single post by its slug attribute from dynamobd table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/slug/{slug}
            Method: GET
            Auth:
              Authorizer: NONE

  # This is a Lambda function config associated with the source code: get-post-by-uuid.js
  GetPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.getPostByUuid
      Description: Get a single post by its uuid attribute from dynamobd table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/{uuid}
            Method: GET
            Auth:
              Authorizer: NONE

  # This is a Lambda function config associated with the source code: create-post.js
  CreatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.createPost
      Description: Insert or update a post from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post
            Method: POST

  # This is a Lambda function config associated with the source code: update-post-by-uuid.js
  UpdatePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.updatePostByUuid
      Description: Update a post from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/{uuid}
            Method: PUT

  # This is a Lambda function config associated with the source code: delete-post-by-uuid.js
  DeletePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.deletePostByUuid
      Description: Delete a post by its uuid attribute from the dynamobd table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/{uuid}
            Method: DELETE

  # This is a Lambda function config associated with the source code: publish-post-by-uuid.js
  PublishPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.publishPostByUuid
      Description: Publish a post from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/{uuid}/publish
            Method: POST

  # This is a Lambda function config associated with the source code: archive-post-by-uuid.js
  ArchivePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.post.archivePostByUuid
      Description: Archive a post from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PostTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /post/{uuid}/archive
            Method: POST

  # This is a Lambda function config associated with the source code: get-all-assets.js
  GetAllAssetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.getAllAssets
      Description: Get all the assets from dynamodb table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AssetTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset/all
            Method: GET

  # This is a Lambda function config associated with the source code: get-asset-by-uuid.js
  GetAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.getAssetByUuid
      Description: Get a single asset by its uuid attribute from dynamobd table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AssetTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset/{uuid}
            Method: GET

  # This is a Lambda function config associated with the source code: create-asset.js
  CreateAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.createAsset
      Description: Insert or update a asset from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssetTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset
            Method: POST

  # This is a Lambda function config associated with the source code: upload-asset.js
  UploadAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.uploadAssetByUuid
      Description: Upload a file to S3
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssetTable
        - S3CrudPolicy:
            BucketName: !Ref PublicAssetBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset/{uuid}/upload
            Method: POST

  # This is a Lambda function config associated with the source code: update-asset-by-uuid.js
  UpdateAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.updateAssetByUuid
      Description: Update a asset from dynamodb table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssetTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset/{uuid}
            Method: PUT

  # This is a Lambda function config associated with the source code: delete-asset-by-uuid.js
  DeleteAssetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.asset.deleteAssetByUuid
      Description: Delete a asset by its uuid attribute from the dynamobd table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AssetTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BlogApi
            Path: /asset/{uuid}
            Method: DELETE

  # DynamoDB table to store post
  PostTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: uuid
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  AssetTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: uuid
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  PublicAssetBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOriginAccessIdentityConfig

  AssetsCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt PublicAssetBucket.DomainName
            Id: PublicAssetBucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref OriginAccessIdentity
        Enabled: 'true'
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: PublicAssetBucket
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 60
          Compress: true

  # Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      UsernameAttributes:
        - email
      UserPoolName: lracicot-samblog

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn:
      - CognitoUserPool
    Properties:
      Domain: !Sub lracicot-blog-${AWS::StackName}
      UserPoolId: !Ref CognitoUserPool

  CognitoCliAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AdminClient
      AllowedOAuthFlows: ['code', 'implicit']
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: ['phone', 'email', 'openid', 'aws.cognito.signin.user.admin', 'profile', 'blog-api/post.write', 'blog-api/asset.write']
      ExplicitAuthFlows: ['ADMIN_NO_SRP_AUTH']
      UserPoolId: !Ref CognitoUserPool
      SupportedIdentityProviders: ['COGNITO']
      CallbackURLs: ['http://localhost:3000/auth', 'https://console.blog.louisracicot.net/auth']
      LogoutURLs: ['http://localhost:3000/logout', 'https://console.blog.louisracicot.net/logout']
      GenerateSecret: false
    DependsOn: [BlogResourseServer]

  BlogResourseServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: blog-api
      Name: Blog API
      Scopes:
        - ScopeDescription: Allow to upsert posts
          ScopeName: post.write
        - ScopeDescription: Allow to upsert assets
          ScopeName: asset.write
      UserPoolId: !Ref CognitoUserPool

  # Domain name setup
  PostDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateArn
      DomainName: !Ref DomainName

  BlogApiBasePathMapping:
    DependsOn: PostDomainName
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref BlogApi
      Stage: Prod

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z2E6WEFRHH6156
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt PostDomainName.DistributionHostedZoneId
        DNSName: !GetAtt PostDomainName.DistributionDomainName

  ApiErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmSubscriptions
      AlarmName: !Sub BlogBackend error count ${AWS::StackName}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 2
      Dimensions:
        - Name: ApiName
          Value: !Sub ${AWS::StackName}
      EvaluationPeriods: 4
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Period: 300
      Statistic: Sum
      Threshold: 2.0
      TreatMissingData: missing

  AlarmSubscriptions:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: info@louisracicot.com
        Protocol: email

  BackendDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub blog-backend-${AWS::StackName}
      DashboardBody: !Sub "{\"widgets\":[{\"type\":\"metric\",\"x\":0,\"y\":9,\"width\":12,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":true,\"metrics\":[[\"AWS/ApiGateway\",\"5XXError\",\"ApiName\",\"sam-blog\",\"Stage\",\"Prod\"]],\"region\":\"ca-central-1\"}},{\"type\":\"metric\",\"x\":0,\"y\":0,\"width\":12,\"height\":9,\"properties\":{\"view\":\"timeSeries\",\"stacked\":true,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${GetAllPostsFunction}\"],[\"...\",\"${GetPublishedPostFunction}\"],[\"...\",\"${GetPostBySlugFunction}\"],[\"...\",\"${GetPostFunction}\"],[\"...\",\"${CreatePostFunction}\"],[\"...\",\"${UpdatePostFunction}\"],[\"...\",\"${UpdatePostFunction}\"],[\"...\",\"${DeletePostFunction}\"],[\"...\",\"${PublishPostFunction}\"],[\"...\",\"${ArchivePostFunction}\"],[\"...\",\"${GetAllAssetsFunction}\"],[\"...\",\"${GetAssetFunction}\"],[\"...\",\"${CreateAssetFunction}\"],[\"...\",\"${UploadAssetFunction}\"],[\"...\",\"${UpdateAssetFunction}\"],[\"...\",\"${DeleteAssetFunction}\"]],\"region\":\"ca-central-1\"}},{\"type\":\"metric\",\"x\":12,\"y\":0,\"width\":12,\"height\":9,\"properties\":{\"view\":\"timeSeries\",\"stacked\":true,\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"${GetAllPostsFunction}\"],[\"...\",\"${GetPublishedPostFunction}\"],[\"...\",\"${GetPostBySlugFunction}\"],[\"...\",\"${GetPostFunction}\"],[\"...\",\"${CreatePostFunction}\"],[\"...\",\"${UpdatePostFunction}\"],[\"...\",\"${UpdatePostFunction}\"],[\"...\",\"${DeletePostFunction}\"],[\"...\",\"${PublishPostFunction}\"],[\"...\",\"${ArchivePostFunction}\"],[\"...\",\"${GetAllAssetsFunction}\"],[\"...\",\"${GetAssetFunction}\"],[\"...\",\"${CreateAssetFunction}\"],[\"...\",\"${UploadAssetFunction}\"],[\"...\",\"${UpdateAssetFunction}\"],[\"...\",\"${DeleteAssetFunction}\"]],\"region\":\"ca-central-1\"}},{\"type\":\"metric\",\"x\":12,\"y\":9,\"width\":12,\"height\":3,\"properties\":{\"view\":\"singleValue\",\"metrics\":[[\"AWS/ApiGateway\",\"Count\",\"ApiName\",\"sam-blog\",\"Stage\",\"Prod\"],[\".\",\"Latency\",\".\",\".\",\".\",\".\"],[\".\",\"IntegrationLatency\",\".\",\".\",\".\",\".\"]],\"region\":\"ca-central-1\"}}]}"

Outputs:
  ApiUrl:
    Description: Url of the api
    Value: !Join ['', ['https://', !Ref DNSRecord]]
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'ApiUrl']]
  CognitoUserPool:
    Description: Cognito User Pool
    Value: !Ref CognitoUserPool
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'CognitoUserPool']]
  CognitoCliAppClient:
    Description: Cognito User Pool App
    Value: !Ref CognitoCliAppClient
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'CognitoCliAppClient']]
  CognitoDomain:
    Description: Cognito User Pool Domain
    Value: !Join
      - ''
      - - !Ref CognitoUserPoolDomain
        - '.auth.'
        - !Ref AWS::Region
        - '.amazoncognito.com'
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'CognitoUserPoolDomain']]
